<?php


namespace booking\forms\land;


use booking\entities\realtor\land\Land;
use booking\entities\realtor\land\Point;
use booking\forms\CompositeForm;
use yii\base\Model;

/**
 * Class LandForm
 * @package booking\forms\land
 * @property PointForm[] $points
 */
class LandForm extends CompositeForm
{
    public $name;
    public $min_price;
    public $count;

    public function __construct(Land $land = null, $config = [])
    {
        $points = [];
        $_n = 0;
        if ($land) {
            $this->name = $land->name;
            $this->min_price = $land->min_price;
            $this->count = $land->count;
            $_n = count($land->points);
            $points = array_map(function (Point $point) {
                return new PointForm($point);
            }, $land->points);
        }
        for ($i = $_n; $i < 100; $i++) $points[] = new PointForm();
        $this->points = $points;
        parent::__construct($config);
    }

    public function rules()
    {
        return [
            [['name', 'min_price'], 'required'],
            ['name', 'string'],
            [['min_price', 'count'], 'integer'],

        ];
    }

    protected function internalForms(): array
    {
        return ['points'];
    }

    public function beforeValidate()
    {
        $this->points = array_filter(
            array_map(function (PointForm $point) {
                if (empty($point->latitude) || empty($point->longitude)) return false;
                return $point;
            }, $this->points)
        );
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }
}